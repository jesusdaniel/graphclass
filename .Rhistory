#                 log_poisson(Adj[[t]][i,j],theta[[t]][i]*theta[[t]][j]*pi_matrix[[t]][q,l])
#               )
#             ))
#         )))))
#       tau[i, ] = normalize_log_probabilities(log(alpha_0)-
#                                                apply(pi_matrix_array,c(1,2),sum)%*%(apply(tau[-i,],2,sum))+
#                                                tensor(log(pi_matrix_array), aperm(tensor(Adj_array[i,-i,, drop=FALSE], tau[-i,],2,1),c(3,1,2)), c(2,3), c(1,3))-
#                                                sum(log_factorial(Adj_array[i,-i,])))
tau[i, ] = normalize_log_probabilities(log(alpha_0)-
c(tensor(pi_matrix_array, t(((theta[i,])*t(theta[-i,]))%*%tau[-i,]),c(2,3),c(1,2)) )+
tensor(log(pi_matrix_array), aperm(tensor(Adj_array[i,-i,, drop=FALSE], tau[-i,],2,1),c(3,1,2)), c(2,3), c(1,3))+
(N-1)*sum(log(theta[i,]))+
sum(log(theta[-i,]))-
sum(log_factorial(Adj_array[i,-i,])))
}
alpha_0 = apply(tau, 2, mean)
for(step in 1:30) {
for(t in 1:T) {
#pi_matrix_array[,,t] = ((t(tau)%*%Adj_array[,,t])%*%tau)/((t(tau)%*%theta[,t])%*%(theta[,t]%*%tau))
pi_matrix_array[,,t] = pi_matrix_array[,,t] + 1/step*(
((t(tau)%*%Adj_array[,,t])%*%tau)/pi_matrix_array[,,t]-
((t(tau)%*%theta[,t])%*%(theta[,t]%*%tau)))
}
}
cat("Iteration", rep,"complete!\n")
}
# Compute loglikelihood
Z = 0*tau
coms = apply(tau,1,which.max)
for(i in 1:ncol(tau))
Z[which(coms==i),i] = 1
Lambda_list = list()
for(i in 1:length(Adj_array[1,1,])) {
Lambda_list[[i]] = diag(theta[,i])%*%(Z%*%pi_matrix_array[,,i])%*%t(Z)%*%diag(theta[,i])
}
loglik = 0
offdiag = matrix(TRUE, nrow = nrow(Adj_array[,,1]), ncol = ncol(Adj_array[,,1]))
diag(offdiag) = FALSE
for(i in 1:length(Adj_array[1,1,])) {
loglik = loglik + sum(log_poisson(Adj_array[,,i], Lambda_list[[i]])[offdiag])
}
return(list(tau = tau, pi_matrix = pi_matrix_array, alpha = alpha_0,
loglik = loglik))
}
N = 100
K = 2
Adj = list()
Adj[[1]] = matrix(0, N,N)
Adj[[1]][1:50, 1:50] = matrix(rpois(50*50,20),50,50)
Adj[[1]][1:50, 51:100] = matrix(rpois(50*50,10),50,50)
Adj[[1]][51:100, 1:50] = matrix(rpois(50*50,10),50,50)
Adj[[1]][51:100, 51:100] = matrix(rpois(50*50,20),50,50)
Adj[[2]] = matrix(0, N,N)
Adj[[2]][1:50, 1:50] = matrix(rpois(50*50,10),50,50)
Adj[[2]][1:50, 51:100] = matrix(rpois(50*50,20),50,50)
Adj[[2]][51:100, 1:50] = matrix(rpois(50*50,20),50,50)
Adj[[2]][51:100, 51:100] = matrix(rpois(50*50,10),50,50)
Adj_array = array(0, dim = c(N,N,T))
Adj_array[,,1] = Adj[[1]]
Adj_array[,,2] = Adj[[2]]
theta = array(0, c(100,2))
theta[,1] = rep(1,100)
theta[,2] = rep(1,100)
N = 100
K = 2
Adj = list()
Adj[[1]] = matrix(0, N,N)
Adj[[1]][1:50, 1:50] = matrix(rpois(50*50,20),50,50)
Adj[[1]][1:50, 51:100] = matrix(rpois(50*50,10),50,50)
Adj[[1]][51:100, 1:50] = matrix(rpois(50*50,10),50,50)
Adj[[1]][51:100, 1:50] = matrix(rpois(50*50,10),50,50)
Adj[[1]][51:100, 51:100] = matrix(rpois(50*50,20),50,50)
Adj[[2]] = matrix(0, N,N)
Adj[[2]][1:50, 1:50] = matrix(rpois(50*50,10),50,50)
Adj[[2]][1:50, 51:100] = matrix(rpois(50*50,20),50,50)
Adj[[2]][51:100, 1:50] = matrix(rpois(50*50,20),50,50)
Adj[[2]][51:100, 51:100] = matrix(rpois(50*50,10),50,50)
Adj_array = array(0, dim = c(N,N,T))
Adj_array[,,1] = Adj[[1]]
Adj_array[,,2] = Adj[[2]]
T
T = 2
Adj_array = array(0, dim = c(N,N,T))
Adj_array[,,1] = Adj[[1]]
Adj_array[,,2] = Adj[[2]]
levelplot(Adj)
library(lattice)
levelplot(Adj)
levelplot(Adj[[1]])
levelplot(Adj[[2]])
theta = array(0, c(100,2))
theta[,1] = rep(1,100)
theta[,2] = rep(1,100)
#########################################################
# Likelihood maximization by variational inference
#########################################################
normalize_log_probabilities <- function(p_arr) {
maxP = max(p_arr)
exp(p_arr-maxP)/sum(exp(p_arr-maxP))
}
log_normal <- function(number, lambda) {
sigma = 1
-(number- lambda)^2
}
log_factorial <- function(number) {
if(length(number)==1)
return(ifelse(number==0,0,sum(sapply(1:number,log))))
ifelse(number == 0, 0, apply(number,c(1,2), function(num) sum(sapply(1:num,log))))
}
random_initial_tau <- function(K,N) {
require(gtools)
tau = rdirichlet(N, rep(0.01,K))
return(tau)
}
fit_communities <- function(tau_0, iterations = 5, Adj_array) {
require(tensor)
#browser()
alpha_0 = apply(tau_0, 2, mean)
N = nrow(tau_0); K = ncol(tau_0)
T = length(Adj_array[1,1,])
pi_matrix_array = array(0, c(K,K,T))
for(t in 1:T) {
denom <- (t(tau_0)%*%theta[,t])%*%(theta[,t]%*%tau_0)
denom <- ifelse(denom==0, 1, denom)
pi_matrix_array[,,t] = ((t(tau_0)%*%Adj_array[,,t])%*%tau_0)/denom
}
tau = tau_0
sigma = 0.5
for(rep in 1:iterations) {
for(i in 1:N) {
#       tau[i, ] = normalize_log_probabilities(log(alpha_0)+
#                                                sapply(1:K, function(q)
#                                                  sum(sapply((1:N)[-i], function(j)
#                                                    sum(sapply(1:K, function(l)
#                                                      (tau[j,l])*sum(sapply(1:T, function(t)
#                                                        log_normal(Adj[[t]][i,j],theta[[t]][i]*theta[[t]][j]*pi_matrix[[t]][q,l])
#                                                      )
#                                                      ))
#                                                   )))))
tau[i, ] = normalize_log_probabilities(log(alpha_0)-
(1/(2*sigma^2))*sum(Adj_array[i,,]^2) +
(1/sigma^2)*tensor((pi_matrix_array), aperm(tensor(Adj_array[i,-i,, drop=FALSE], tau[-i,],2,1),c(3,1,2)), c(2,3), c(1,3))-
apply(pi_matrix_array^2,c(1,2),sum)%*%(apply(tau[-i,],2,sum))-
log(sqrt(2*pi)) - log(sigma))
}
alpha_0 = apply(tau, 2, mean)
for(t in 1:T) {
denom <- (t(tau_0)%*%theta[,t])%*%(theta[,t]%*%tau_0)
denom <- ifelse(denom==0, 1, denom)
pi_matrix_array[,,t] = ((t(tau)%*%Adj_array[,,t])%*%tau)/denom
}
cat("Iteration", rep,"complete!\n")
}
#   # Compute loglikelihood
Z = 0*tau
coms = apply(tau,1,which.max)
for(i in 1:ncol(tau))
Z[which(coms==i),i] = 1
#   Lambda_list = list()
#   for(i in 1:length(Adj)) {
#     Lambda_list[[i]] = diag(theta[[i]])%*%(Z%*%pi_matrix_array[,,i])%*%t(Z)%*%diag(theta[[i]])
#   }
#   loglik = 0
#   offdiag = matrix(TRUE, nrow = nrow(Adj[[1]]), ncol = ncol(Adj[[1]]))
#   diag(offdiag) = FALSE
#   for(i in 1:length(Adj)) {
#     loglik = loglik + sum(log_normal(Adj[[i]], Lambda_list[[i]])[offdiag])
#   }
return(list(tau = tau, pi_matrix = pi_matrix_array, alpha = alpha_0, Z = Z))
#loglik = loglik))
}
# Simulation -------------------------------------
N = 100
K = 2
Adj = list()
Adj[[1]] = matrix(0, N,N)
Adj[[1]][1:50, 1:50] = matrix(rnorm(50*50,20),50,50)
Adj[[1]][1:50, 51:100] = matrix(rnorm(50*50,10),50,50)
Adj[[1]][51:100, 1:50] = matrix(rnorm(50*50,10),50,50)
Adj[[1]][51:100, 51:100] = matrix(rnorm(50*50,20),50,50)
Adj[[2]] = matrix(0, N,N)
Adj[[2]][1:50, 1:50] = matrix(rnorm(50*50,10),50,50)
Adj[[2]][1:50, 51:100] = matrix(rnorm(50*50,20),50,50)
Adj[[2]][51:100, 1:50] = matrix(rnorm(50*50,20),50,50)
Adj[[2]][51:100, 51:100] = matrix(rnorm(50*50,10),50,50)
Adj_array = array(0, dim = c(N,N,T))
Adj_array[,,1] = Adj[[1]]
Adj_array[,,2] = Adj[[2]]
theta = array(0, c(100,2))
theta[,1] = rep(1,100)
theta[,2] = rep(1,100)
Adj_array = array(0, c(263,263,124))
theta = array(1, c(263,124))
for(i in 1:124) {
A = matrix(0,263, 263)
A[upper.tri(A)] = X[i,]
A = A + t(A)
Adj_array[,,i] = A
theta[,i] = rep(1,263)
}
library(lattice)
levelplot(Adj_array[,,1],col.regions = gray(100:0/100))
Adj  = Adj_array
K = 5
tau_0 = random_initial_tau(K, ncol(Adj[,,1]))
communities = fit_communities(tau_0, iterations = 5)
communities$tau
communities$alpha
t(communities$tau[,1])%*%Zroi[c(1:74,76:264),]
pi_vec = t(apply(communities$pi_matrix,3,function(x) c(x[upper.tri(x,diag = T)])))
u = princomp(pi_vec,cor=T)
pairs(pi_vec[,1:15], col = Y+2)
summary(u)
N = 100
K = 2
Adj = list()
Adj[[1]] = matrix(0, N,N)
Adj[[1]][1:50, 1:50] = matrix(rnorm(50*50,20),50,50)
Adj[[1]][1:50, 51:100] = matrix(rnorm(50*50,10),50,50)
Adj[[1]][51:100, 1:50] = matrix(rnorm(50*50,10),50,50)
Adj[[1]][51:100, 51:100] = matrix(rnorm(50*50,20),50,50)
Adj[[2]] = matrix(0, N,N)
Adj[[2]][1:50, 1:50] = matrix(rnorm(50*50,10),50,50)
Adj[[2]][1:50, 51:100] = matrix(rnorm(50*50,20),50,50)
Adj[[2]][51:100, 1:50] = matrix(rnorm(50*50,20),50,50)
Adj[[2]][51:100, 51:100] = matrix(rnorm(50*50,10),50,50)
Adj_array = array(0, dim = c(N,N,T))
Adj_array[,,1] = Adj[[1]]
Adj_array[,,2] = Adj[[2]]
theta = array(0, c(100,2))
theta[,1] = rep(1,100)
theta[,2] = rep(1,100)
Adj_array = array(0, c(263,263,124))
theta = array(1, c(263,124))
for(i in 1:124) {
A = matrix(0,263, 263)
A[upper.tri(A)] = X[i,]
A = A + t(A)
Adj_array[,,i] = A
theta[,i] = rep(1,263)
}
library(lattice)
levelplot(Adj_array[,,1],col.regions = gray(100:0/100))
theta = array(1, c(263,124))
for(i in 1:124) {
A = matrix(0,263, 263)
A[upper.tri(A)] = X[i,]
A = A + t(A)
Adj_array[,,i] = A
theta[,i] = rep(1,263)
}
graphclass::COBRE_Y
read.csv("C:/Users/JDAR/Downloads/for_paired_analysis.csv")
paired_an <- read.csv("C:/Users/JDAR/Downloads/for_paired_analysis.csv")
text.before.after <- read.csv("C:/Users/JDAR/Downloads/for_paired_analysis.csv")
unique(text.before.after$variable)
categories <- unique(text.before.after$variable)
x = categories[1]
x
which(text.before.after$variable==x)
entries <- which(text.before.after$variable==x)
subset <- which(text.before.after$variable==x)
subset <- text.before.after[entries]
entries <- which(text.before.after$variable==x)
subset <- text.before.after[entries]
subset <- text.before.after[entries,]
subset$uid
factor(text.before.after$uid)
text.before.after$uid <- factor(text.before.after$uid)
subset$time
subset$variable
entries <- which(text.before.after$variable==x)
subset <- text.before.after[entries,]
subset$
lm(vale ~ uid + time, subset)
subset$
lm.fit(formula = vale ~ uid + time, data = subset)
?lm.fit
?lm
subset$
lm(formula = value ~ uid + time, data = subset)
subset$value
subset$
lm(formula = value ~ uid + time, data = subset)
subset$
lm(formula = value ~ ., data = subset)
subset$
lm(formula = value ~ 1, data = subset)
lm(formula = value ~ 1, data = subset)
lm(formula = value ~ uid + time, data = subset)
coefs <- lm(formula = value ~ uid + time, data = subset)
coefs$effects
summary(coefs)
sums <- summary(coefs)
sums$coefficients
sums$coefficients[,4]
sums$coefficients[10,4]
sums$coefficients[9,4]
pvals <- for(x in categories) {
entries <- which(text.before.after$variable==x)
subset <- text.before.after[entries,]
coefs <- lm(formula = value ~ uid + time, data = subset)
sums <- summary(coefs)
sums$coefficients[9,4]
}
pvals
pvals <- lapply(categories, function(x) {
entries <- which(text.before.after$variable==x)
subset <- text.before.after[entries,]
coefs <- lm(formula = value ~ uid + time, data = subset)
sums <- summary(coefs)
sums$coefficients[9,4]
})
pvals
hist(pvals)
hist(unlist(pvals))
pvals <- sapply(categories, function(x) {
entries <- which(text.before.after$variable==x)
subset <- text.before.after[entries,]
coefs <- lm(formula = value ~ uid + time, data = subset)
sums <- summary(coefs)
sums$coefficients[9,4]
})
hist((pvals))
order(pvals)
categories[order(pvals)]
order(pvals)
sort(pvals)
categories[order(pvals)]
pvals
sums$coefficients
coefs <- sapply(categories, function(x) {
entries <- which(text.before.after$variable==x)
subset <- text.before.after[entries,]
coefs <- lm(formula = value ~ uid + time, data = subset)
sums <- summary(coefs)
sums$coefficients[9,1]
})
coefs[order(pvals)]
-sign(coefs[order(pvals)])
cbind(-sign(coefs[order(pvals)]), categories[order(pvals)], order(pvals))
categories[order(pvals)]
cbind(-sign(coefs[order(pvals)]), as.character(categories[order(pvals)]), order(pvals))
data.frame(-sign(coefs[order(pvals)]), as.character(categories[order(pvals)]), order(pvals))
pvals
data.frame(-sign(coefs[order(pvals)]), as.character(categories[order(pvals)]), as.numeric(order(pvals)))
data.frame(-sign(coefs[order(pvals)]), as.character(categories[order(pvals)]), as.numeric(sort(pvals)))
data.frame(-sign(coefs[order(pvals)]), (categories[order(pvals)]), (sort(pvals)))
rank(subset$value)
ranks = rank(subset$value)
max(ranks)
min(ranks)
(2*ranks - 1)/ max(ranks)
qnorm((2*ranks - 1)/ max(ranks))
transf = (2*ranks - 1)/ max(ranks)
transf
qnorm(transf)[1:10]
transt[1:10]
transf[1:10]
transf = (2*ranks - 1)/ (2*max(ranks))
qnorm(transf)
subset$value <- qnorm(transf)
pvals <- sapply(categories, function(x) {
entries <- which(text.before.after$variable==x)
subset <- text.before.after[entries,]
ranks = rank(subset$value)
transf = (2*ranks - 1)/ (2*max(ranks))
subset$value <- qnorm(transf)
coefs <- lm(formula = value ~ uid + time, data = subset)
sums <- summary(coefs)
sums$coefficients[9,4]
})
data.frame(-sign(coefs[order(pvals)]), (categories[order(pvals)]), (sort(pvals)))
coefs <- sapply(categories, function(x) {
entries <- which(text.before.after$variable==x)
subset <- text.before.after[entries,]
ranks = rank(subset$value)
transf = (2*ranks - 1)/ (2*max(ranks))
subset$value <- qnorm(transf)
coefs <- lm(formula = value ~ uid + time, data = subset)
sums <- summary(coefs)
sums$coefficients[9,1]
})
data.frame(-sign(coefs[order(pvals)]), (categories[order(pvals)]), (sort(pvals)))
data.frame(-sign(coefs[order(pvals)]), (categories[order(pvals)]), p.adjust(sort(pvals), method = "holm"))
pvals.cor = p.adjust(sort(pvals), method = "holm")
data.frame(-sign(coefs[order(pvals)]), (categories[order(pvals)]), pvals.cor)
data.frame((categories[order(pvals)]), -sign(coefs[order(pvals)]), pvals.cor)
u = data.frame((categories[order(pvals)]), -sign(coefs[order(pvals)]), pvals.cor)
u[1:13,]
library(xtable)
xtable(u[1:13,])
pvals <- sapply(categories, function(x) {
entries <- which(text.before.after$variable==x)
subset <- text.before.after[entries,]
ranks = rank(subset$value)
transf = (2*ranks - 1)/ (2*max(ranks))
subset$value <- qnorm(transf)
coefs <- lm(formula = value ~ uid + time, data = subset)
sums <- summary(coefs)
sums$coefficients[9,4]
})
coefs <- sapply(categories, function(x) {
entries <- which(text.before.after$variable==x)
subset <- text.before.after[entries,]
ranks = rank(subset$value)
transf = (2*ranks - 1)/ (2*max(ranks))
subset$value <- qnorm(transf)
coefs <- lm(formula = value ~ uid + time, data = subset)
sums <- summary(coefs)
sums$coefficients[9,1]
})
pvals.cor = p.adjust(sort(pvals), method = "holm")
u = data.frame((categories[order(pvals)]), -sign(coefs[order(pvals)]), pvals.cor)
hist((pvals))
library(xtable)
xtable(u[1:13,])
setwd("C:/Users/JDAR/Box Sync/Git/graphclass/R")
setwd("C:/Users/JDAR/Box Sync/Git/graphclass")
roxygen2::roxygenise()
install.packages(repos=NULL, "graphclass_1.0.tar.gz")
R CMD Rd2pdf --pdf --title=graphclass -o graphclass.pdf man/*.Rd
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
install.packages(repos=NULL, "graphclass_1.0.tar.gz")
library(glmnet)
glmnet
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
install.packages("Rdpack")
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
library(Rdpack)
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::build()
roxygen2::roxygenise()
devtools::build()
roxygen2::roxygenise()
devtools::build()
roxygen2::roxygenise()
devtools::build()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::build()
roxygen2::roxygenise()
devtools::build()
devtools::document()
devtools::document()
roxygen2::roxygenise()
devtools::document()
roxygen2::roxygenise()
devtools::build()
devtools::document()
devtools::document()
roxygen2::roxygenise()
devtools::build()
install.packages(repos=NULL, "graphclass_1.0.tar.gz")
devtools::document()
roxygen2::roxygenise()
devtools::build()
devtools::document()
roxygen2::roxygenise()
devtools::build()
roxygen2::roxygenise()
importFrom(Rdpack,reprompt)
roxygen2::roxygenise()
devtools::build()
devtools::document()
roxygen2::roxygenise()
devtools::build()
install.packages(repos=NULL, "../graphclass_1.0.tar.gz")
library(graphclass)
?graphclass
?graphclass
detach(graphclass)
detach(graphclass, force = T)
detach("graphclass", force = T)
detach("package:graphclass", force = T)
detach("package:graphclass", unload = T)
detach("package:graphclass", force = T)
devtools::document()
roxygen2::roxygenise()
devtools::build()
devtools::document()
devtools::document()
devtools::document()
roxygen2::roxygenise()
devtools::build()
install.packages(repos=NULL, "../graphclass_1.0.tar.gz")
devtools::document()
roxygen2::roxygenise()
devtools::build()
install.packages(repos=NULL, "../graphclass_1.0.tar.gz")
library(graphclass)
devtools::document()
roxygen2::roxygenise()
devtools::build()
install.packages(repos=NULL, "../graphclass_1.0.tar.gz")
library(graphclass)
install.packages(repos=NULL, "../graphclass_1.0.tar.gz")
