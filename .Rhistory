Adj_matr <- 1 * (Adj_matr != 0)
atval <- seq(0, 1, length.out = cuts)
col.vals <- rgb((0:cuts)/cuts, green = 0, blue = 1, red = 0)
}
if (!is.null(communities)) {
lengths_coms = sapply(communities, length)
scales_list = list(tck = c(0, 0), x = list(at = Reduce("+",
c(0, lengths_coms[1:(length(lengths_coms) - 1)]),
accumulate = T) + lengths_coms/2, labels = community_labels),
y = list(at = Reduce("+", c(0, rev(lengths_coms)[1:(length(lengths_coms) -
1)]), accumulate = T) + rev(lengths_coms)/2,
labels = rev(community_labels)))
panel_func = function(...) {
panel.levelplot(...)
if (type == "prob_cells") {
select_list <- which(sel_cells, arr.ind = T)
for (cell in 1:nrow(select_list)) {
fill_block(select_list[cell, 1], select_list[cell,
2], communities)
}
}
for (u in Reduce("+", lengths_coms, accumulate = T)) {
panel.abline(v = u + 0.5)
}
for (u in Reduce("+", rev(lengths_coms), accumulate = T)) {
panel.abline(h = u + 0.5)
}
}
nodeorder = unlist(communities)
Adj_matr <- Adj_matr[nodeorder, nodeorder]
Adj_matr <- Adj_matr[, seq(from = ncol(Adj_matr), to = 1,
by = -1)]
levelplot(Adj_matr, at = atval, xlab = axislabel, ylab = axislabel,
main = main, colorkey = colorkey, col.regions = col.vals,
panel = panel_func, scales = scales_list)
}
else {
Adj_matr <- Adj_matr[, seq(from = ncol(Adj_matr), to = 1,
by = -1), drop = F]
levelplot(Adj_matr, at = atval, xlab = axislabel, ylab = axislabel,
col.regions = col.vals, main = main, colorkey = colorkey,
scales = list(tck = c(1, 0), x = list(at = seq(0,
ncol(Adj_matr), by = tckspace)), y = list(at = NODES -
tckspace - seq(0, ncol(Adj_matr), by = tckspace),
labels = (seq(tckspace, ncol(Adj_matr), tckspace)))))
}
}
<bytecode: 0x000000000b946258>
<environment: namespace:graphclass>
plot_adjmatrix(edgevalues = t(as.matrix(svd(res1)$u[,1, drop = F]))
, colorlims = c(-1,1), main = "X - proj_Y(X)")
n = 100
sapply(1:n, function(i) log(1 -(i+1)/(n+1)))
sapply(1:n, function(i) log(1 -(i)/(n+1)))
sum(sapply(1:n, function(i) log(1 -(i)/(n+1))))
sum(sapply(1:n, function(i) log(1 -1/(i+1))))
sapply(2:50, function(n)
)
sapply(2:50, function(n)
sum(sapply(1:n, function(i) log(1 -1/(i+1)))))
plot(sapply(2:50, function(n)
sum(sapply(1:n, function(i) log(1 -1/(i+1))))))
plot(sapply(2:100, function(n)
sum(sapply(1:n, function(i) log(1 -1/(i+1))))))
plot(sapply(2:1000, function(n)
sum(sapply(1:n, function(i) log(1 -1/(i+1))))))
plot(sapply(2:10000, function(n)
sum(sapply(1:n, function(i) log(1 -1/(i+1))))))
n = 20000
sum(sapply(1:n, function(i) log(1 -1/(i+1)))))
sum(sapply(1:n, function(i) log(1 -1/(i+1))))
n = 30000
sum(sapply(1:n, function(i) log(1 -1/(i+1))))
n = 100000
sum(sapply(1:n, function(i) log(1 -1/(i+1))))
sum(1/(2:n))
log(1+sum(1/(2:n)))
log(1+sum(1/(2:n))) - sum(sapply(1:n, function(i) log(1 -1/(i+1))))
log(1+sum(1/(2:n))) + sum(sapply(1:n, function(i) log(1 -1/(i+1))))
plot(sapply(2:100, function(n)
log(1+sum(1/(2:n))) + sum(sapply(1:n, function(i) log(1 -1/(i+1))))
))
library(graphclass)
data("COBRE.data")
plot_adjmatrix(COBRE.data$X.cobre[1,])
plot_adjmatrix(matrix_to_vec(COBRE.data$X.cobre[1,]))
matrix_to_vec(COBRE.data$X.cobre[1,])
plot_adjmatrix(matrix_to_vec(t(COBRE.data$X.cobre[1,])))
A = matrix_to_vec(t(COBRE.data$X.cobre[1,]))
library(graphclass)
plot_adjmatrix(graphclass::get_matrix(COBRE.data$X.cobre[1,])))
plot_adjmatrix(graphclass::get_matrix(COBRE.data$X.cobre[1,]))
matrix_to_vec(graphclass::get_matrix(COBRE.data$X.cobre[1,]))
X2 <- matrix_to_vec(graphclass::get_matrix(COBRE.data$X.cobre[1,]))
X <- COBRE.data$X.cobre
plot_adjmatrix(X[1, ])
plot_adjmatrix(get_matrix(X[1, ]))
X2 <- matrix_to_vec(get_matrix(X[1,]))
cbind(X[1,], X2)
cbind(X[1,]== X2)
A <- diag(4)
A
A <- matrix(1:16, 4)
A
matrix_to_vec(A)
setwd("C:/Users/JDAR/Desktop/Box Sync 2/Box Sync/Research/fMRI/GRAPHCLASS_4/Results")
load("C:/Users/JDAR/Desktop/Box Sync 2/Box Sync/Research/fMRI/GRAPHCLASS_4/Results/CV/.RData")
load("C:/Users/JDAR/Desktop/Box Sync 2/Box Sync/Research/fMRI/GRAPHCLASS_4/Results/CV/General-CV-gamma1e-05-nestedCV.RData")
lambda_seq <- rev(c(0.05*10^(-c(0:14)),0))
lambda_seq
# load results file
NUM_nodes = 263
NUM_edges = NUM_nodes*(NUM_nodes-1)/2
name = "cobre1e-05"
load("General-CV-gamma1e-05-nestedCV.RData")
setwd("C:/Users/JDAR/Desktop/Box Sync 2/Box Sync/Research/fMRI/GRAPHCLASS_4/Results/CV")
load("General-CV-gamma1e-05-nestedCV.RData")
#load("C:/Users/Daniel/Box Sync/Research/fMRI/GRAPHCLASS_4/Results/CV/UMich-General-CV-gamma1e-05-nestedCV.RData")
load("General-CV-gamma1e-05.RData")
rho = cross_validation$rho
lambda = cross_validation$lambda
gamma = cross_validation$gamma
folds = 10
nested_sparsity <- aperm(array(unlist(lapply(1:length(nested_cross_validation), function(j) nested_cross_validation[[j]]$sparse)),
dim = c(length(rho),length(lambda),length(gamma), folds,folds)), c(4,5,1,2,3))
dimnames(nested_sparsity) <- list(foldout = 1:folds, foldeval = 1:folds,
rho = rho, lambda = lambda, gamma = gamma)
library(lattice)
levelplot(nested_sparsity)
nested_nodesparsity <- array(unlist(lapply(1:length(nested_cross_validation), function(j) nested_cross_validation[[j]]$node_sparse)),
dim = c(folds,folds,length(rho),length(lambda),length(gamma)))
dimnames(nested_nodesparsity) <- list(foldout = 1:folds, foldeval = 1:folds,
rho = rho, lambda = lambda, gamma = gamma)
source("../../cross-validation/cross_validation_eval_functions.R")
rhos <- cross_validation$rho
lambdas <- cross_validation$lambda
gammas <- cross_validation$gamma
library(lattice)
library(graphclass)
# Sparsity table from different levels
# Final solution level
sparse_final <- apply(cross_validation$betas_table, c(2,3,4), function(vec) sum(vec!=0))
levelplot(sparse_final)
node_sparse_final <- apply(cross_validation$betas_table, c(2,3,4), function(vec) node_sparsity(vec!=0))
levelplot(node_sparse_final)
# Cross validation level-----------------------------------------------------------------
levelplot(cross_validation$cv_errors)
error_cv <- cross_validation$cv_errors
sparse_cv_table <- sapply(cross_validation$betas_folds,
function(param) sapply(param, function(vec)
sum(vec!=0)))
sparse_cv_table <- array(sparse_cv_table, dim = c(10, length(rhos), length(lambdas), length(gammas)))
dimnames(sparse_cv_table) <- list(fold = 1:10, rho = rhos, lambda = lambdas, gamma = gammas)
sparse_cv <- apply(sparse_cv_table, c( 2,3, 4), mean)
levelplot(sparse_cv)
node_sparse_cv_table <- sapply(cross_validation$betas_folds,
function(param) sapply(param, function(vec)
node_sparsity(vec!=0)))
node_sparse_cv_table <- array(node_sparse_cv_table, dim = c(10, length(rhos), length(lambdas), length(gammas)))
dimnames(node_sparse_cv_table) <- list(fold = 1:10, rho = rhos, lambda = lambdas, gamma = gammas)
node_sparse_cv <- apply(node_sparse_cv_table, c( 2,3, 4), mean)
levelplot(node_sparse_cv)
plot(sparse_cv, error_cv, ylim = c(0,0.5))
plot(sparse_cv[,1,], error_cv[,1,], ylim = c(0,0.5), pch = 16, col = 1)
lines(sparse_cv[,1,], error_cv[,1,], ylim = c(0,0.5), col = 1)
lines(sparse_cv[,10,], error_cv[,10,], ylim = c(0,0.5), col = 1)
sapply(2:length(lambdas), function(i) {
points(sparse_cv[,i,], error_cv[,i,], col = i, pch = 16)
lines(sparse_cv[,i,], error_cv[,i,], col = i)
}  )
legend("topright",
legend=1:11, fill=1:11, horiz=F)
plot(node_sparse_cv, error_cv, ylim = c(0, 0.5))
plot(node_sparse_cv[,1,], error_cv[,1,], ylim = c(0,0.5), pch = 16, col = 1)
lines(node_sparse_cv[,1,], error_cv[,1,], ylim = c(0,0.5), col = 1)
sapply(2:length(lambdas), function(i) {
points(node_sparse_cv[,i,], error_cv[,i,], col = i, pch = 16)
lines(node_sparse_cv[,i,], error_cv[,i,], col = i)
}  )
legend("topright",
legend=1:11, fill=1:11, horiz=F)
# ---------------------------------------------------------------------------------------------
# nested cross validation level ---------------------------------------------------------------
error_nested <- apply(cross_validation$nested_errors, c(3,4,5), mean, na.rm = T)
levelplot(error_nested)
sparse_nested_table <- sapply(nested_cross_validation,
function(param) (1-param$sparse)*34453)
sparse_nested_table <- array(sparse_nested_table, dim = c(45, length(rhos), length(lambdas), length(gammas)))
dimnames(sparse_nested_table) <- list(subfolds = 1:45, rho = rhos, lambda = lambdas, gamma = gammas)
sparse_nested <- apply(sparse_nested_table, c( 2,3, 4), mean)
dim(sparse_nested)
node_sparse_nested_table <- sapply(nested_cross_validation,
function(param) param$node_sparse)
node_sparse_nested_table <- array(node_sparse_nested_table, dim = c(45, length(rhos), length(lambdas), length(gammas)))
dimnames(node_sparse_nested_table) <- list(subfolds = 1:45, rho = rhos, lambda = lambdas, gamma = gammas)
node_sparse_nested <- apply(node_sparse_nested_table, c( 2,3, 4), mean)
levelplot(node_sparse_nested)
plot(sparse_nested, error_nested, ylim = c(0,0.5))
plot(node_sparse_nested, error_nested, ylim = c(0, 0.5))
############# Cross - validation error ----------------------------------------------
nested_cross_validation_error <- function(cross_validation_object, selection = "min") {
foldout_meanerrors <- apply(cross_validation_object$nested_errors, c(3,4,5,1), mean, na.rm = T)
foldout_se_errors <- apply(cross_validation_object$nested_errors, c(3,4,5,1), function(x) sd(x, na.rm=T)/sqrt(length(x)-sum(is.na(x))))
min_errors <- apply(foldout_meanerrors, 4, min)
foldout_best_params <- t(apply(foldout_meanerrors, 4, function(U) {
best_params <- which(U==min(U), arr.ind = T)
if(length(best_params)>3) { #select smallest lambda  = max index 2 (+ best_params[,1]?)
best_params <- best_params[which.max(best_params[,2]*100),]
}
return(best_params)
}))
if(selection=="1se") {
foldout_selected_params <- t(sapply(1:length(min_errors), function(i) {
params_within1se <- which(foldout_meanerrors[,,,i,drop=F] - foldout_se_errors[,,,i,drop=F]<=min_errors[i],arr.ind = T)
params_within1se[which.min(apply(params_within1se, 1, function(u) u[1]*1000 + u[2]*10 + u[3]*0.01)),]
#params_within1se[which.max(apply(params_within1se, 1, function(u) u[2]*1000 + u[1]*10 + u[3]*0.01)),]
}))[,1:3]
}else {
foldout_selected_params <- foldout_best_params
}
return(list(mean_cverror = mean(sapply(1:nrow(foldout_selected_params), function(i)
cross_validation_object$errors[foldout_selected_params[i,1], foldout_selected_params[i,2], foldout_selected_params[i,3], i])),
se_cverror = sd(sapply(1:nrow(foldout_selected_params), function(i)
cross_validation_object$errors[foldout_selected_params[i,1], foldout_selected_params[i,2], foldout_selected_params[i,3], i]))/sqrt(nrow(foldout_selected_params))))
}
nested_cross_validation_error(cross_validation, "1se")
nested_cross_validation_error(cross_validation_object = cross_validation)
nested_cross_validation_error
nested_cross_validation_error(cross_validation_object = cross_validation)
nested_cross_validation_error(cross_validation, "1se")
cross_validation$errors
dim(cross_validation$errors)
cross_validation_object = cross_validation
foldout_meanerrors <- apply(cross_validation_object$nested_errors, c(3,4,5,1), mean, na.rm = T)
foldout_se_errors <- apply(cross_validation_object$nested_errors, c(3,4,5,1), function(x) sd(x, na.rm=T)/sqrt(length(x)-sum(is.na(x))))
min_errors <- apply(foldout_meanerrors, 4, min)
foldout_meanerrors
############# Cross - validation error ----------------------------------------------
nested_cross_validation_error <- function(cross_validation_object, selection = "min") {
foldout_meanerrors <- apply(cross_validation_object$nested_errors, c(3,4,5,1), mean, na.rm = T)
foldout_se_errors <- apply(cross_validation_object$nested_errors, c(3,4,5,1), function(x) sd(x, na.rm=T)/sqrt(length(x)-sum(is.na(x))))
min_errors <- apply(foldout_meanerrors, 4, min)
foldout_best_params <- t(apply(foldout_meanerrors, 4, function(U) {
best_params <- which(U==min(U), arr.ind = T)
if(length(best_params)>3) { #select smallest lambda  = max index 2 (+ best_params[,1]?)
best_params <- best_params[which.max(best_params[,2]*100),]
}
return(best_params)
}))
if(selection=="1se") {
foldout_selected_params <- t(sapply(1:length(min_errors), function(i) {
params_within1se <- which(foldout_meanerrors[,,,i,drop=F] - foldout_se_errors[,,,i,drop=F]<=min_errors[i],arr.ind = T)
params_within1se[which.min(apply(params_within1se, 1, function(u) u[1]*1000 + u[2]*10 + u[3]*0.01)),]
#params_within1se[which.max(apply(params_within1se, 1, function(u) u[2]*1000 + u[1]*10 + u[3]*0.01)),]
}))[,1:3]
}else {
foldout_selected_params <- foldout_best_params
}
return(list(mean_cverror = mean(sapply(1:nrow(foldout_selected_params), function(i)
cross_validation_object$errors[foldout_selected_params[i,1], foldout_selected_params[i,2], foldout_selected_params[i,3], i])),
se_cverror = sd(sapply(1:nrow(foldout_selected_params), function(i)
cross_validation_object$errors[foldout_selected_params[i,1], foldout_selected_params[i,2], foldout_selected_params[i,3], i]))/sqrt(nrow(foldout_selected_params))))
}
nested_cross_validation_error(cross_validation, "1se")
foldout_best_params <- t(apply(foldout_meanerrors, 4, function(U) {
best_params <- which(U==min(U), arr.ind = T)
if(length(best_params)>3) { #select smallest lambda  = max index 2 (+ best_params[,1]?)
best_params <- best_params[which.max(best_params[,2]*100),]
}
return(best_params)
}))
foldout_best_params
foldout_selected_params <- t(sapply(1:length(min_errors), function(i) {
params_within1se <- which(foldout_meanerrors[,,,i,drop=F] - foldout_se_errors[,,,i,drop=F]<=min_errors[i],arr.ind = T)
params_within1se[which.min(apply(params_within1se, 1, function(u) u[1]*1000 + u[2]*10 + u[3]*0.01)),]
#params_within1se[which.max(apply(params_within1se, 1, function(u) u[2]*1000 + u[1]*10 + u[3]*0.01)),]
}))[,1:3]
foldout_selected_params
View(cross_validation)
cross_validation$errors
dim(cross_validation$errors)
dim(cross_validation$cv_errors)
(cross_validation$cv_errors)
min(cross_validation$cv_errors)
which(cross_validation$cv_errors== min(cross_validation$cv_errors), arr.ind = T)
cross_validation$cv_errors - cross_validation$sd_errors
min(cross_validation$cv_errors)
which(cross_validation$cv_errors - cross_validation$sd_errors <= min(cross_validation$cv_errors))
which(cross_validation$cv_errors - cross_validation$sd_errors <= min(cross_validation$cv_errors), arr.ind = T)
cross_validation$sd_errors
which(cross_validation$cv_errors - cross_validation$sd_errors/sqrt(10) <= min(cross_validation$cv_errors), arr.ind = T)
sparse_cv
indexes <- which(cross_validation$cv_errors - cross_validation$sd_errors/sqrt(10) <= min(cross_validation$cv_errors), arr.ind = T)
sparse_cv[indexes]
which(cross_validation$cv_errors== min(cross_validation$cv_errors), arr.ind = T)
indexes = which(cross_validation$cv_errors== min(cross_validation$cv_errors), arr.ind = T)
sparse_cv[indexes]
indexes
sparse_cv
sparse_cv[indexes]
indexes <- which(cross_validation$cv_errors - cross_validation$sd_errors/sqrt(10) <= min(cross_validation$cv_errors), arr.ind = T)
sparse_cv[indexes]
which.min(sparse_cv[indexes])
indexes[36, ]
rho[3]
lambda[8]
cross_validation$cv_errors[indexes[36, ]]
indexes[36, ]
cross_validation$cv_errors
indexes[36, ]
cross_validation$cv_errors[3, 8, 1]
dim(cross_validation$betas_table)
cross_validation$betas_table[, 3, 8, 1]
sum(cross_validation$betas_table[, 3, 8, 1]!=0)
apply(cross_validation$betas_table, c(2, 3, 4), function(beta) sum(beta!= 0))
apply(cross_validation$betas_table, c(2, 3, 4), function(beta) sum(beta!= 0)) == 549
which(apply(cross_validation$betas_table, c(2, 3, 4), function(beta) sum(beta!= 0)) == 549)
apply(cross_validation$betas_table, c(2, 3, 4), function(beta) sum(beta!= 0))
indexes <- which(cross_validation$cv_errors - cross_validation$sd_errors/sqrt(10) <= min(cross_validation$cv_errors), arr.ind = T)
indexes
which.min(sparse_cv[indexes])
indexes[36, ]
sparse_cv[3, 9, 1]
sparse_cv[3, 8, 1]
order(sparse_cv[indexes])
indexes[order(sparse_cv[indexes]), ]
min(cross_validation$cv_errors)
indexes = which(cross_validation$cv_errors== min(cross_validation$cv_errors), arr.ind = T)
indexes
cross_validation$sd_errors[indexes]
cross_validation$sd_errors[indexes]/sqrt(10)
cross_validation$sd_errors[indexes[1]]/sqrt(10)
cross_validation$sd_errors[indexes[1]]
cross_validation$sd_errors[indexes[1,]]/sqrt(10)
cross_validation$sd_errors[indexes][1]/sqrt(10)
indexes <- which(cross_validation$cv_errors -cross_validation$sd_errors[indexes][1]/sqrt(10) <= min(cross_validation$cv_errors), arr.ind = T)
indexes
indexes[order(sparse_cv[indexes]), ]
sparse_cv[indexes]
min(sparse_cv[indexes])
which.min(sparse_cv[indexes])
sparse_cv[3, 9, 1]
indexes <- which(cross_validation$cv_errors - cross_validation$sd_errors/sqrt(10) <= min(cross_validation$cv_errors), arr.ind = T)
indexes
which(apply(cross_validation$betas_table, c(2, 3, 4), function(beta) sum(beta!= 0)) == 549)
which(apply(cross_validation$betas_table, c(2, 3, 4), function(beta) sum(beta!= 0)) == 546)
sparsity = apply(cross_validation$betas_table,c(2,3,4), function(x) sum(x!=0))
node_sparsity = apply(cross_validation$betas_table,c(2,3,4), function(x) node_sparsity(x))
dim(sparsity)
sparsity[4,9,1]
sparsity[3,10,1]
sparsity[2,11,1]
node_sparsity[4,9,1]*263
node_sparsity[3,10,1]*263
node_sparsity[2,11,1]*263
best_set = which(cross_validation$cv_errors<= min(cross_validation$cv_errors), arr.ind = T)
best_set
se1 = which(cross_validation$cv_errors<= min(cross_validation$cv_errors) +
2*cross_validation$sd_errors[4,9,1]/sqrt(10), arr.ind = T)
se1
cbind(cross_validation$cv_errors[se1],
(cross_validation$cv_errors[se1] - min(cross_validation$cv_errors)) /
(max(cross_validation$sd_errors[best_set])/sqrt(10)),
sparsity[se1], se1, node_sparsity[se1])[order(node_sparsity[se1]),]
cbind(node_sparse_nested[se1], node_sparse_cv[se1], node_sparsity[se1], se1)[order(node_sparsity[se1]),]
cbind(sparse_nested[se1], sparse_cv[se1], sparsity[se1], se1)[order(node_sparsity[se1]),]
cross_validation$rho[3]
cross_validation$lambda[8]
cbind(sparsity[se1], se1)
min(sparsity[se1])
node_sparsity[se1]
263-max(node_sparsity[se1])*263
se1[which.max(node_sparsity[se1]),]
node_sparsity[3,9,1]
sparsity[3,9,1]
max(node_sparsity[se1])*263
node_sparsity[3,9,1]
263*(1-node_sparsity[3,9,1])
node_sparsity[se1]
se1[which.max(node_sparsity[se1]),]
node_sparsity[3,9,1]
sparsity[3,9,1]
cbind(sparsity[se1], 263*(1-node_sparsity[se1]), se1)
se1[which.max(node_sparsity[se1]),]
se1_solutions = apply(se1, 1, function(s) cross_validation$betas_table[,s[1], s[2], s[3]])
se1_solutions = (se1_solutions!=0)
plot_adjmatrix(apply(se1_solutions, 1, prod))
# pass to ranks
X = apply(X, 1, order)
# pass to ranks
library(graphclass)
data("COBRE.data")
X = apply(COBRE.data$X.cobre, 1, order)
plot_adjmatrix(X[1,])
X = t(apply(COBRE.data$X.cobre, 1, order)_
X = t(apply(COBRE.data$X.cobre, 1, order))
plot_adjmatrix(X[1,])
plot_adjmatrix(X[1,]-15000)
plot_adjmatrix(COBRE.data$X.cobre[1,])
X1 <- rank(COBRE.data$X.cobre)
X1
X1 <- rank(COBRE.data$X.cobre[1,])
X1
plot_adjmatrix(X1 - mean(X1))
X = t(apply(COBRE.data$X.cobre, 1, rank))
plot_adjmatrix(X[1,]-15000)
rho
rho[3]
gamma[1]
rho[3]
lambda[9]
gamma[1]
sol = graphclass(X = X, Y = COBRE.data$Y.cobre, lambda = lambda[9], gamma = gamma[1], rho = rho[3])
sol$beta
sum(sol$beta!=0)
X = scale(X)
sol = graphclass(X = X, Y = COBRE.data$Y.cobre, lambda = lambda[9], gamma = gamma[1], rho = rho[3])
sum(sol$beta!=0)
se1 = which(cross_validation$cv_errors<= min(cross_validation$cv_errors) +
cross_validation$sd_errors[4,9,1]/sqrt(10), arr.ind = T)
cbind(cross_validation$cv_errors[se1],
(cross_validation$cv_errors[se1] - min(cross_validation$cv_errors)) /
(max(cross_validation$sd_errors[best_set])/sqrt(10)),
sparsity[se1], se1, node_sparsity[se1])[order(node_sparsity[se1]),]
cbind(node_sparse_nested[se1], node_sparse_cv[se1], node_sparsity[se1], se1)[order(node_sparsity[se1]),]
cbind(sparse_nested[se1], sparse_cv[se1], sparsity[se1], se1)[order(node_sparsity[se1]),]
cross_validation$rho[3]
cross_validation$lambda[8]
cbind(sparsity[se1], se1)
min(sparsity[se1])
node_sparsity[se1]
263-max(node_sparsity[se1])*263
se1[which.max(node_sparsity[se1]),]
gamma
rho[3]
rho[4]
seq(2, -3, length.out = 11)
seq(-2, -7, length.out = 11)
lambda[9]
cross_validation$cv_errors
se1 = which(cross_validation$cv_errors<= min(cross_validation$cv_errors) +
cross_validation$sd_errors[4,9,1]/sqrt(10), arr.ind = T)
se1
cbind(cross_validation$cv_errors[se1],
(cross_validation$cv_errors[se1] - min(cross_validation$cv_errors)) /
(max(cross_validation$sd_errors[best_set])/sqrt(10)),
sparsity[se1], se1, node_sparsity[se1])[order(node_sparsity[se1]),]
cbind(node_sparse_nested[se1], node_sparse_cv[se1], node_sparsity[se1], se1)[order(node_sparsity[se1]),]
cbind(sparse_nested[se1], sparse_cv[se1], sparsity[se1], se1)[order(node_sparsity[se1]),]
library(R.matlab)
mat = readMat("C:\Users\JDAR\Desktop\Box Sync 2\Box Sync\Research\fMRI\Old\GROUP_LASSO\Data\COBRE_cleansed.mat")
mat = readMat("C:\\Users\\JDAR\\Desktop\\Box Sync 2\\Box Sync\\Research\\fMRI\\Old\\GROUP_LASSO\\Data\\COBRE_cleansed.mat")
library(graphclass)
data("COBRE.data")
COBRE.data$X.cobre[1, 1:100]
max(COBRE.data$X.cobre)
max(tanh(COBRE.data$X.cobre))
min(tanh(COBRE.data$X.cobre))
library(rtweet)
uu = get_favorites("280494600" )
uu$user_id
uu = get_favorites("280494600" )
uu = get_favorites("380670328" )
load("C:/Users/JDAR/Documents/GitHub/graphclass/data/COBRE.data.rda")
uu = get_favorites("380670328" )
load("C:/Users/JDAR/Documents/GitHub/graphclass/data/COBRE.data.rda")
COBRE.data$Y.cobre
csv = read.csv("C:\\Users\\JDAR\\Desktop\\Box Sync 2\\Box Sync\\Research\\fMRI\\Old\\GROUP_LASSO\\Data\\COBRE_all.csv)
csv = read.csv("C:\\Users\\JDAR\\Desktop\\Box Sync 2\\Box Sync\\Research\\fMRI\\Old\\GROUP_LASSO\\Data\\COBRE_all.csv")
csv$Index
csv$Subject
COBRE.data$Y.cobre
COBRE.data$subject.label = csv$Subject
cor(COBRE.data$X.cobre[, 1], csv$AGE)
cor(COBRE.data$X.cobre[, 2], csv$AGE)
cor(COBRE.data$X.cobre[, 3], csv$AGE)
COBRE.data$subject.label
setwd("~/GitHub/graphclass/R")
save(COBRE.data, file = "../data/COBRE.data.rda")
library(graphclass)
UMich.data
data("UMich.data")
UMich.data$Y.umich
table(UMich.data$Y.umich)
setwd("~/GitHub/graphclass")
devtools::document()
devtools::use_rcpp()
devtools:::use_rcpp()
devtools::load_all()
roxygen2::roxygenise()
devtools::build(manual = TRUE)
devtools::build(manual = TRUE)
devtools::build(manual = TRUE)
pkgbuild::has_latex()
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library(devtools)
devtools::use_rcpp()
devtools::build(manual = TRUE)
devtools::check(manual=TRUE)
?build
devtools::document()
library(devtools)
devtools::document()
devtools::load_all()
devtools::use_rcpp()
devtools::use_rcpp()
devtools::document()
