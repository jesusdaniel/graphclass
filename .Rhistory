data.frame(-sign(coefs[order(pvals)]), (categories[order(pvals)]), (sort(pvals)))
data.frame(-sign(coefs[order(pvals)]), (categories[order(pvals)]), p.adjust(sort(pvals), method = "holm"))
pvals.cor = p.adjust(sort(pvals), method = "holm")
data.frame(-sign(coefs[order(pvals)]), (categories[order(pvals)]), pvals.cor)
data.frame((categories[order(pvals)]), -sign(coefs[order(pvals)]), pvals.cor)
u = data.frame((categories[order(pvals)]), -sign(coefs[order(pvals)]), pvals.cor)
u[1:13,]
library(xtable)
xtable(u[1:13,])
pvals <- sapply(categories, function(x) {
entries <- which(text.before.after$variable==x)
subset <- text.before.after[entries,]
ranks = rank(subset$value)
transf = (2*ranks - 1)/ (2*max(ranks))
subset$value <- qnorm(transf)
coefs <- lm(formula = value ~ uid + time, data = subset)
sums <- summary(coefs)
sums$coefficients[9,4]
})
coefs <- sapply(categories, function(x) {
entries <- which(text.before.after$variable==x)
subset <- text.before.after[entries,]
ranks = rank(subset$value)
transf = (2*ranks - 1)/ (2*max(ranks))
subset$value <- qnorm(transf)
coefs <- lm(formula = value ~ uid + time, data = subset)
sums <- summary(coefs)
sums$coefficients[9,1]
})
pvals.cor = p.adjust(sort(pvals), method = "holm")
u = data.frame((categories[order(pvals)]), -sign(coefs[order(pvals)]), pvals.cor)
hist((pvals))
library(xtable)
xtable(u[1:13,])
prep = read.table("C:/Users/JDAR/Downloads/PREP2006-Presidente.txt", sep = "|", header = T)
prep = read.table("C:/Users/JDAR/Downloads/PREP2006-Presidente.txt", sep = "|", header = T)
prep = read.table("C:/Users/JDAR/Downloads/PREP2006-Presidente.txt", sep = "|", header = T)
prep = read.table("C:/Users/JDAR/Downloads/PREP2006-Presidente.txt", sep = "|", header = T)
sum(prep$PAN)
sum(prep$ALIANZA_POR_MEXICO)
sum(prep$POR_EL_BIEN_DE_TODOS)
prep$HORA_RECEPCION_CEDAT
timeregistered= sapply(prep$HORA_RECEPCION_CEDAT, as.Date)
timeregistered
timeregistered[1:10]
timeregistered= sapply(prep$HORA_RECEPCION_CEDAT, as.Date, format = "%m/%d/%Y %H:%M:%S")
timeregistered
timeregistered[1:10]
timeregistered[1:10]
prep$HORA_RECEPCION_CEDAT[1:10]
as.Date(prep$HORA_RECEPCION_CEDAT[1:10], format = "%m/%d/%Y %H:%M:%S")
as.Date(prep$HORA_RECEPCION_CEDAT[1:10], format = "%d/%m/%Y %H:%M:%S")
as.Date(prep$HORA_RECEPCION_CEDAT[1:10], format = "%d/%m/%y %H:%M:%S")
as.POSIXct(prep$HORA_RECEPCION_CEDAT[1:10], format = "%d/%m/%y %H:%M:%S")
as.numeric(as.POSIXct(prep$HORA_RECEPCION_CEDAT[1:10], format = "%d/%m/%y %H:%M:%S"))
as.POSIXct, format = "%d/%m/%y %H:%M:%S")
timeregistered= as.numeric(sapply(prep$HORA_RECEPCION_CEDAT,
as.POSIXct, format = "%d/%m/%y %H:%M:%S"))
time order = order(timeregistered)
timeregistered
timeorder = order(timeregistered)
timeorder
cumsum(prep$PAN)
plot(cumsum(prep$PAN))
plot(cumsum(prep$PAN[timeorder]))
cumtotal = cumsum(prep$TOTAL_VOTOS[timeorder])
cumpan = cumsum(prep$TOTAL_VOTOS[timeorder])
cumpan = cumsum(prep$PAN[timeorder])
plot(cumpan/cumtotal)
cumamlo = cumsum(prep$POR_EL_BIEN_DE_TODOS[timeorder])
points(cumamlo/cumtotal, col = "yellow")
prep$HORA_RECEPCION_CEDAT[1:3]
timeregistered[1:3]
timeorder[1:3]
timeorder = order(timeregistered, decreasing = T )
plot(cumsum(prep$PAN[timeorder]))
cumtotal = cumsum(prep$TOTAL_VOTOS[timeorder])
cumpan = cumsum(prep$PAN[timeorder])
cumamlo = cumsum(prep$POR_EL_BIEN_DE_TODOS[timeorder])
plot(cumpan/cumtotal)
points(cumamlo/cumtotal, col = "yellow")
length(prep$PAN)
prep$PAN/prep$TOTAL_VOTOS[117280:117287]
prep$PAN[117280:117287]/prep$TOTAL_VOTOS[117280:117287]
prep$PAN[117280:117287]/prep$TOTAL_VOTOS[117250:117287]
prep$PAN[timeorder[117280:117287]]/prep$TOTAL_VOTOS[timeorder[117250:117287]]
prep$PAN[timeorder[117250:117287]]/prep$TOTAL_VOTOS[timeorder[117250:117287]]
prep$ESTADO[timeorder[117250:117287]]
prep$ESTADO
prep$NOM_ESTADO[timeorder[117250:117287]]
# subset guanajuato
which(as.character(prep$NOM_ESTADO[timeorder])=="Guanajuato")
# subset guanajuato
guanajuato = which(as.character(prep$NOM_ESTADO[timeorder])=="Guanajuato")
cumpan = cumsum((prep$PAN[timeorder])[guanajuato])
cumtotal = cumsum((prep$TOTAL_VOTOS[timeorder])[guanajuato])
cumamlo = cumsum((prep$POR_EL_BIEN_DE_TODOS[timeorder])[guanajuato])
cumpan = cumsum((prep$PAN[timeorder])[guanajuato])
cumtotal = cumsum((prep$TOTAL_VOTOS[timeorder])[guanajuato])
cumamlo = cumsum((prep$POR_EL_BIEN_DE_TODOS[timeorder])[guanajuato])
plot(cumpan/cumtotal)
points(cumamlo/cumtotal, col = "yellow")
plot(cumpan/cumtotal, ylim = c(0.1, 0.6))
points(cumamlo/cumtotal, col = "yellow")
prep$NOM_ESTADO
unique(prep$NOM_ESTADO)
# subset guanajuato
guanajuato = which(as.character(prep$NOM_ESTADO[timeorder])=="Distrito Federal")
cumpan = cumsum((prep$PAN[timeorder])[guanajuato])
cumtotal = cumsum((prep$TOTAL_VOTOS[timeorder])[guanajuato])
cumamlo = cumsum((prep$POR_EL_BIEN_DE_TODOS[timeorder])[guanajuato])
plot(cumpan/cumtotal, ylim = c(0.1, 0.7))
points(cumamlo/cumtotal, col = "yellow")
# subset guanajuato
guanajuato = which(as.character(prep$NOM_ESTADO[timeorder])=="Sonora")
cumpan = cumsum((prep$PAN[timeorder])[guanajuato])
cumtotal = cumsum((prep$TOTAL_VOTOS[timeorder])[guanajuato])
cumamlo = cumsum((prep$POR_EL_BIEN_DE_TODOS[timeorder])[guanajuato])
plot(cumpan/cumtotal, ylim = c(0.1, 0.7))
points(cumamlo/cumtotal, col = "yellow")
# subset guanajuato
guanajuato = which(as.character(prep$NOM_ESTADO[timeorder])=="Chiapas")
cumpan = cumsum((prep$PAN[timeorder])[guanajuato])
cumtotal = cumsum((prep$TOTAL_VOTOS[timeorder])[guanajuato])
cumamlo = cumsum((prep$POR_EL_BIEN_DE_TODOS[timeorder])[guanajuato])
plot(cumpan/cumtotal, ylim = c(0.1, 0.7))
points(cumamlo/cumtotal, col = "yellow")
# subset guanajuato
guanajuato = which(as.character(prep$NOM_ESTADO[timeorder])=="Aguascalientes")
cumpan = cumsum((prep$PAN[timeorder])[guanajuato])
cumtotal = cumsum((prep$TOTAL_VOTOS[timeorder])[guanajuato])
cumamlo = cumsum((prep$POR_EL_BIEN_DE_TODOS[timeorder])[guanajuato])
plot(cumpan/cumtotal, ylim = c(0.1, 0.7))
points(cumamlo/cumtotal, col = "yellow")
library(cats)
?hello
library(graphclass)
library(graphclass)
library(graphclass)
library(graphclass)
?graphclass
?graphclass.default
library(foreign)
dataset = read.spss("C:\\Users/JDAR/Downloads/3-Estudio-Parametría-25-30abril-basededatos.sav", to.data.frame=TRUE)
dataset$BOLETA1
dataset$BOLETA2
dataset$BOLETA2
dataset = read.spss("C:\\Users/JDAR/Downloads/3-Estudio-Parametría-25-30abril-basededatos.sav",
to.data.frame=FALSE, use.value.labels=FALSE)
attr(dataset, "variable.labels")
# copy all value labels as separated list
labels <- attr(dataset, "label.table")
labels
# convert list to data frame
data <- as.data.frame(dataset)
# copy all variable labels in separated list
vars <- attr(dataset, "variable.labels")
data$BOLETA3
dataset = read.spss("C:\\Users/JDAR/Downloads/3-Estudio-Parametría-25-30abril-basededatos.sav",
to.data.frame=TRUE)
vars
vars[[1]]
vars[[2]]
vars[[3]]
vars[[10]]
dataset$PUNTO
unique(dataset$PUNTO)
vars[[9]]
vars
dataset$Pond
vars
dataset$P05
unique(dataset$P05)
vars
unique(dataset$P06)
which(dataset$P05 == "Posgrado")
pos = which(dataset$P05 == "Posgrado")
dataset[pos,]$BOLETA1
dataset[pos,]$BOLETA2
dataset[pos,]$BOLETA3
dataset[pos,7:9]
dataset[pos,]
prop.table(dataset$BOLETA2)
table(dataset$BOLETA2)
sum(table(dataset$BOLETA2))
table(dataset$BOLETA2)
sum(table(dataset$BOLETA2))
table(dataset$BOLETA2) /sum(table(dataset$BOLETA2))
library(dirmult)
install.packages("dirmult")
install.packages("Compositional")
dataset$BOLETA2
x = dataset$BOLETA2=="MORENA"
x
x = 1*(dataset$BOLETA2=="MORENA")
sum(x)
table(dataset$BOLETA2) /sum(table(dataset$BOLETA2))
dataset[,"BOLETA1"]
dataset[,c("BOLETA1", "BOLETA2", "BOLETA3")]
mean(x, na.rm = T)
weighted.mean(x, na.rm = T)
weighted.mean(x, na.rm = T, w = dataset$Pond)
x = 1*(dataset$BOLETA2=="PAN")
mean(x, na.rm = T)
weighted.mean(x, na.rm = T, w = dataset$Pond)
x = 1*(dataset$BOLETA2=="PRI")
mean(x, na.rm = T)
weighted.mean(x, na.rm = T, w = dataset$Pond)
x = 1*(dataset$BOLETA1=="MORENA")
mean(x, na.rm = T)
dataset$BOLETA1
x = 1*(dataset$BOLETA1=="Andrés Manuel López Obrador (MORENA)")
mean(x, na.rm = T)
weighted.mean(x, na.rm = T, w = dataset$Pond)
x = 1*(dataset$BOLETA1=="Ricardo Anaya (PAN)")
mean(x, na.rm = T)
weighted.mean(x, na.rm = T, w = dataset$Pond)
x <- rdiri( 100, c(5, 7, 1, 3, 10, 2, 4) )
library(Compositional)
x <- rdiri( 100, c(5, 7, 1, 3, 10, 2, 4) )
x
dim(x)
diri.est(x)
x <- rdiri( 100, c(5, 7, 1, 3, 10, 2, 4) )
x
x
diri.est(x)
diri.est(x, type = "prec")
?graphclass
??graphclass
table(dataset$BOLETA2)
table(dataset$BOLETA2)[1:6]
votecounts  = table(dataset$BOLETA2)[1:6]
x <- rdiri( 1000, votecounts )
x
dim(x)
x[,1]
votecounts
table(dataset$BOLETA2)
votecounts  = table(dataset$BOLETA2)[1:9]
names(votecounts)
x <- rdiri( 1000, votecounts )
x
x[,6]
x[,7]
names(votecounts)
x[,8]
x[,8]*32
hist(x[,8]*32)
hist(x[,8])
x <- rdiri( 1000, votecounts )
hist(x[,8])
x <- rdiri( 1000, votecounts/1.5 )
hist(x[,8])
x <- rdiri( 1000, votecounts + 50 )
hist(x[,8])
x <- rdiri( 1000, rep(50,9) )
hist(x[,8])
x <- rdiri( 1000, rep(500,9) )
hist(x[,8])
x <- rdiri( 1000, rep(1,9) )
hist(x[,8])
calculate_plurionominales(votecounts/sum(votecounts))
calculate_plurionominales <- function(percentages) {
perc <- ifelse(percentages<0.03, 0, percentages)
#before rounding
total <- floor(perc*32)
fraction = perc*32-total
#split the remainder
total[order(fraction,decreasing = T)[1:(32-sum(total))]] <-
total[order(fraction,decreasing = T)[1:(32-sum(total))]]+1
total
}
calculate_plurionominales(votecounts/sum(votecounts))
votecounts/sum(votecounts)
simulated <- rdiri( 1000, votecounts + 1 )
simulated
apply(simulated, 1, calculate_plurionominales)
table_counts <- array(0, dim = c(32, length(votecounts))
)
for(i in 1:nrow(table_counts)) {
for(j in 1:ncol(table_counts))
table_counts[i,j] <- sum(simulated[,j]>=i)
}
table_counts
simulated
simulated_counts<- apply(simulated, 1, calculate_plurionominales)
for(i in 1:nrow(table_counts)) {
for(j in 1:ncol(table_counts))
table_counts[i,j] <- sum(simulated_counts[,j]>=i)
}
table_counts
simulated_counts
simulated <- rdiri( 1000, votecounts + 1 )
simulated_counts<- t(apply(simulated, 1, calculate_plurionominales))
for(i in 1:nrow(table_counts)) {
for(j in 1:ncol(table_counts))
table_counts[i,j] <- sum(simulated_counts[,j]>=i)
}
table_counts
simulated <- rdiri( 1000, votecounts/1.5 + 1 )
simulated_counts<- t(apply(simulated, 1, calculate_plurionominales))
table_counts <- array(0, dim = c(32, length(votecounts)))
for(i in 1:nrow(table_counts)) {
for(j in 1:ncol(table_counts))
table_counts[i,j] <- sum(simulated_counts[,j]>=i)
}
simulated_counts/1000
table_counts/1000
names(votecounts)
simulated <- rdiri( 1000, votecounts/3 + 1 )
simulated_counts<- t(apply(simulated, 1, calculate_plurionominales))
table_counts <- array(0, dim = c(32, length(votecounts)))
for(i in 1:nrow(table_counts)) {
for(j in 1:ncol(table_counts))
table_counts[i,j] <- sum(simulated_counts[,j]>=i)
}
table_counts/1000
simulated <- rdiri( 1000, votecounts/10 + 1 )
simulated_counts<- t(apply(simulated, 1, calculate_plurionominales))
table_counts <- array(0, dim = c(32, length(votecounts)))
for(i in 1:nrow(table_counts)) {
for(j in 1:ncol(table_counts))
table_counts[i,j] <- sum(simulated_counts[,j]>=i)
}
table_counts/1000
table_counts15 <- array(0, dim = c(32, length(votecounts)))
simulated <- rdiri( 1000, votecounts/1.5 + 1 )
simulated_counts<- t(apply(simulated, 1, calculate_plurionominales))
table_counts15 <- array(0, dim = c(32, length(votecounts)))
for(i in 1:nrow(table_counts)) {
for(j in 1:ncol(table_counts))
table_counts15[i,j] <- sum(simulated_counts[,j]>=i)
}
table_counts15/1000
table_counts/1000
table_counts15/1000
table_counts/1000
table_counts[1:16,]/1000
table_counts15[1:16,]/1000
names(votecounts)
simulated <- rdiri( 1000, c(votecounts/1.5 + 1 ))
calculate_plurionominales <- function(percentages) {
percentages = percentages[-1]
percentages = percentages/sum(percentages)
perc <- ifelse(percentages<0.03, 0, percentages)
#before rounding
total <- floor(perc*32)
fraction = perc*32-total
#split the remainder
total[order(fraction,decreasing = T)[1:(32-sum(total))]] <-
total[order(fraction,decreasing = T)[1:(32-sum(total))]]+1
total
}
simulated <- rdiri( 1000, c(votecounts, 1000)/1.5 + 1 ))
simulated_counts<- t(apply(simulated, 1, calculate_plurionominales))
table_counts15 <- array(0, dim = c(32, length(votecounts)))
for(i in 1:nrow(table_counts)) {
for(j in 1:ncol(table_counts))
table_counts15[i,j] <- sum(simulated_counts[,j]>=i)
}
table_counts15[1:16,]/1000
simulated <- rdiri( 1000, c(votecounts, 1000)/1.5 + 1 ))
simulated
simulated <- rdiri( 1000, c(votecounts, 1000)/1.5 + 1 ))
simulated <- rdiri( 1000, c(votecounts, 1000)/1.5 + 1 )
simulated_counts<- t(apply(simulated, 1, calculate_plurionominales))
simulated_counts
dim(simulated_counts)
calculate_plurionominales <- function(percentages) {
percentages = percentages[-10]
percentages = percentages/sum(percentages)
perc <- ifelse(percentages<0.03, 0, percentages)
#before rounding
total <- floor(perc*32)
fraction = perc*32-total
#split the remainder
total[order(fraction,decreasing = T)[1:(32-sum(total))]] <-
total[order(fraction,decreasing = T)[1:(32-sum(total))]]+1
total
}
calculate_plurionominales(votecounts/sum(votecounts))
votecounts/sum(votecounts)
simulated <- rdiri( 1000, c(votecounts, 1000)/1.5 + 1 )
simulated_counts<- t(apply(simulated, 1, calculate_plurionominales))
table_counts15 <- array(0, dim = c(32, length(votecounts)))
for(i in 1:nrow(table_counts)) {
for(j in 1:ncol(table_counts))
table_counts15[i,j] <- sum(simulated_counts[,j]>=i)
}
table_counts15[1:16,]/1000
simulated <- rdiri( 1000, c(votecounts, 10000)/1.5 + 1 )
simulated_counts<- t(apply(simulated, 1, calculate_plurionominales))
table_counts15 <- array(0, dim = c(32, length(votecounts)))
for(i in 1:nrow(table_counts)) {
for(j in 1:ncol(table_counts))
table_counts15[i,j] <- sum(simulated_counts[,j]>=i)
}
table_counts15[1:16,]/1000
votematrix <- model.matrix(~dataset$BOLETA2-1)
votematrix
colnames(votematrix)
votematrix <- model.matrix(~dataset$BOLETA2-1)[,1:9]
colnames(votematrix)
votecounts <- apply(votematrix, 2, weighted.mean, w = dataset$Pond))
votecounts <- apply(votematrix, 2, weighted.mean, w = dataset$Pond)
dataset$Pond
dim(votematrix)
dim(dataset)
sum(is.na(dataset$BOLETA2))
votecounts <- apply(votematrix, 2, weighted.mean, w = dataset$Pond[!is.na(dataset$BOLETA2)])
votecounts
votecounts <- apply(votematrix, 2, weighted.mean, w = dataset$Pond[!is.na(dataset$BOLETA2)])*sum(!is.na(dataset$BOLETA2))
votecounts
simulated <- rdiri( 1000, c(votecounts)/1.5 + 1 )
simulated_counts<- t(apply(simulated, 1, calculate_plurionominales))
table_counts15 <- array(0, dim = c(32, length(votecounts)))
for(i in 1:nrow(table_counts)) {
for(j in 1:ncol(table_counts))
table_counts15[i,j] <- sum(simulated_counts[,j]>=i)
}
table_counts15[1:16,]/1000
table_counts[1:16,]/1000
hist(simulated[,8])
sd(simulated[,8])
simulated <- rdiri( 1000, c(votecounts)/1.5 + 1 )
simulated_counts<- t(apply(simulated, 1, calculate_plurionominales))
simulated_counts
simulated <- rdiri( 10000, c(votecounts)/1.5 + 1 )
simulated_counts<- t(apply(simulated, 1, calculate_plurionominales))
table_counts15 <- array(0, dim = c(32, length(votecounts)))
for(i in 1:nrow(table_counts)) {
for(j in 1:ncol(table_counts))
table_counts15[i,j] <- sum(simulated_counts[,j]>=i)
}
table_counts15[1:16,]/1000
table_counts15[1:16,]/10000
votecounts
sum(votecounts) - votecounts[8]
votecounts[8]*(sum(votecounts) - votecounts[8]) / sum(votecounts)^2
votecounts[8]*(sum(votecounts) - votecounts[8]) / sum(votecounts)^2*(sum(votecounts)+1)
votecounts[8]*(sum(votecounts) - votecounts[8]) / sum(votecounts)^2/(sum(votecounts)+1)
sqrt(votecounts[8]*(sum(votecounts) - votecounts[8]) / sum(votecounts)^2/(sum(votecounts)+1))
simulated <- rdiri( 10000, c(votecounts)/4 + 1 )
simulated_counts<- t(apply(simulated, 1, calculate_plurionominales))
table_counts15 <- array(0, dim = c(32, length(votecounts)))
for(i in 1:nrow(table_counts)) {
for(j in 1:ncol(table_counts))
table_counts15[i,j] <- sum(simulated_counts[,j]>=i)
}
table_counts15[1:16,]/10000
colnames(table_counts15) = names(votecounts)
table_counts15
table_counts15[1:16,]/10000
names(votecounts)
colnames(table_counts15) = names(table(dataset$BOLETA2)[1:9])
table_counts15[1:16,]/10000
votematrix <- model.matrix(~dataset$BOLETA2-1)[,1:9]
colnames(votematrix)
votecounts <- apply(votematrix, 2, weighted.mean, w = dataset$Pond[!is.na(dataset$BOLETA2)])*sum(!is.na(dataset$BOLETA2))
calculate_plurionominales <- function(percentages) {
perc <- ifelse(percentages<0.03, 0, percentages)
#before rounding
total <- floor(perc*32)
fraction = perc*32-total
#split the remainder
total[order(fraction,decreasing = T)[1:(32-sum(total))]] <-
total[order(fraction,decreasing = T)[1:(32-sum(total))]]+1
total
}
calculate_plurionominales(votecounts/sum(votecounts))
simulated <- rdiri( 10000, c(votecounts)/1.5 + 1 )
simulated
sqrt(votecounts[8]*(sum(votecounts) - votecounts[8]) / sum(votecounts)^2/(sum(votecounts)+1))
simulated_counts<- t(apply(simulated, 1, calculate_plurionominales))
table_counts15 <- array(0, dim = c(32, length(votecounts)))
for(i in 1:nrow(table_counts)) {
for(j in 1:ncol(table_counts))
table_counts15[i,j] <- sum(simulated_counts[,j]>=i)
}
table_counts[1:16,]/1000
colnames(table_counts15) = names(table(dataset$BOLETA2)[1:9])
table_counts15[1:16,]/10000
table_counts15[1:16,]/10000
setwd("C:/Users/JDAR/Box Sync/Git")
library(devtools)
devtools::document()
roxygen2::roxygenise()
setwd("C:/Users/JDAR/Box Sync/Git/graphclass")
library(devtools)
devtools::document()
roxygen2::roxygenise()
devtools::build(manual = TRUE)
install.packages(repos=NULL, "../graphclass_1.0.tar.gz")
devtools::document()
roxygen2::roxygenise()
devtools::build(manual = TRUE)
install.packages(repos=NULL, "../graphclass_1.0.tar.gz")
devtools::document()
roxygen2::roxygenise()
devtools::build(manual = TRUE)
install.packages(repos=NULL, "../graphclass_1.0.tar.gz")
library(graphclass)
library(devtools)
devtools::document()
roxygen2::roxygenise()
devtools::build(manual = TRUE)
install.packages(repos=NULL, "../graphclass_1.0.tar.gz")
devtools::document()
roxygen2::roxygenise()
devtools::build(manual = TRUE)
install.packages(repos=NULL, "../graphclass_1.0.tar.gz")
